## Release Buddy

 __TODO_ fail if wrong branch in any stage.

#### Prep

* Check bugzilla for showstoppers

#### Create/Update the configfile for this release

* If making a new major release you will need to create a brand new configfile.

   Use _buddy-create-cffile.py_ to create the new configfile.
   For example to create a new configfile for the KDE SC 4.9 release:

         % buddy-create-cffile.py kde-4.9.rc

   Once the configfile is created you must hand-edit, changing a few of the
   settings near the top of the file as needed.

   Note: _buddy-create-cffile.py_ relies on _kde-checkout-list.pl_ which
   you can find in kdesdk/scripts.  You need to make sure that Perl script
   is available in your execute path.

* If simply changing the minor version or patch level then you can edit the
  associated settings for Minor or Patch in the configfile.  Not much else
  should need to be changed.

* Inspecting the configfile for a KDE SC release, you should see many projects
  listed along with their descriptions. If you don't see this long list,
  something went terribly long.

#### Checkout writable repos

* The buddy _checkout_ command is used to checkout a read-write copy of
  the all the project repositories.  When completed, you will find all the
  repositories in TOP/kde-VERSION/sources.

  For example:

         % buddy checkout kde-4.9.rc

* You might want to make a dry-run before doing the real checkouts.
  Pass the "--dry-run" option to buddy if you want to do this.

  Like so:

         % buddy checkout kde-4.9.rc --dry-run

* By default, a log of the checkouts will be saved to the file "checkout.log"
  in your current working dir, but you can change the logfile with the 
  "--logFile=/path/to/logfile" option.

#### Make changes to the repos as needed, for example:

* This is a the hard part. There are lots of tweaks to make now, for instance:

  Update version numbers for:
  * kdelibs/CMakeLists.txt
  * kdepimlibs/CMakeLists.txt
  * kde-baseapps/CMakeLists.txt
  * kde-runtime/CMakeLists.txt
  * kde-workspace/CMakeLists.txt
  * kdelibs/kdecore/sycoca/ksycoca.cpp --> ksycoca version number
  * kdelibs/README
  * kdenetwork/kopete/libkopete/kopeteversion.h
  * gwenview/lib/version.h
  * kdepim/CMakeLists.txt (KDEPIM_DEV_VERSION / KDEPIM_VERSION)
  * kdepim-runtime/CMakeLists (KDEPIM_RUNTIME_DEV_VERSION and KDEPIM_RUNTIME_VERSION)
  * for koffice: configure.in.in, lib/kofficecore/kofficeversion.h, etc.

  fixuifiles __TODO__ Needed? Not done in the release-tools scripts

  Update kdepackages in kdelibs/kdeui __TODO__ Needed? Not done in the release-tools scripts

  In the stable branch, remove the MALLOC_CHECK_ block from kdebase/workspace/startkde.cmake

#### Create tags (and push tags)

* buddy createtag makes a tag for each project with the name "vVERSION"

* The tag is created from the current branch.

* Push the tags

* At this point the tags __ARE PUSHED__

#### Create tarball

* Use the buddy _pack_ command.
  For example:

        % buddy pack kde-4.9.rc

#### Do a final testbuild

* Use mjansen's build-tool?

#### Upload for Packager testing

* run sha256sum *.xz and put that info in the sysadmin bug report when
  the request to move them from incoming to the final place is made.

  *Note:* the sysadmins run sha256sum -c to validate the .xz files
  before moving them from /incoming to the final place

#### kdelibs

* When moving to new minor versions (i.e. 4.8 to 4.9), we are permitted to
  branch kdelibs for versioning purposes.
  As dfaure says: "I'm opposed to new branches to maintain. Switching to
  "bugfixes in 4.8" to "bugfixes in 4.9, 4.8 is dead" doesn't increase the
  number of branches to maintain, so that's fine."

#### Branching

* __TODO__ give bcooksley and PoVAddict a python program that branches
  each project and optionally pushes that new branch
  (options: --create-only, --dry-run)
  The rights for this is included in the "release-team" ACL group
